git init      # 初始化本地仓库, 会创建.git文件夹, .git是当前目录是否是仓库的标志
git add file  # 将file添加到git中, file的状态从untracked变为staged
git status    # 查看当前仓库的状态, 比如: 哪些文件是untracked(没有被追踪的, 即没有
    # 添加到git仓库的), 哪些是staged(可以被commited的), 哪些是之前add但是有修改过
git diff      # 查看文件修改的具体地方, git diff HEAD -- file 可以查看工作区和最新
    # 版本的file的区别
git commit -m 'the description'  # 提交修改到仓库, 必须是有-m选项
git checkout -- file  # 如果修改了file或直接用系统命令删除了file, 则可以由此恢复
    # git checkout name    # 是进入名字为name的branch
    # git checkout -- file # 是撤销对file的修改, 具体来说此命令的作用是让file退回
    #   到最近一次git commit或git add的状态, 即如果file修改后没有过add, 则是回到
    #   该本版的最初状态(最近的commit), 如果add之后修改的, 则是回到add后没修改的
    #   状态, 另外如果是用git checkout HEAD file, 则是直接回到最初的commit版本
    # git reset HEAD file  # 可以把file从暂存区取出重新放回到工作区, 此时可以继续
    #   使用git checkout -- file 使file回到最初的commit状态
git rm file   # 删除文件, 此命令执行后删除操作是staged状态的, 如果是系统rm命令直接
    #   删除, 则这个操作是unstaged的(不会被commit命令提交), 所以此时如果要删除文件
    #   则在使用git rm file将删除操作变为staged, 然后在commit, 如果不想删除, 则用
    #   git checkout -- file将删除操作撤销, 但是需注意, 此撤销其实是恢复git中的最
    #   新版本到工作区, 如果在git的最新版本后期修改内容(没有add到暂存区), 则这些修
    #   改是没有保留的

git log --pretty=oneline  # 查看commit的历史记录, HEAD是当前版本, 往下是时间越靠前
    # 的版本, 前面的16进制串是commit_id(版本号), 是一个哈希值
git reflog    # 可以查看命令历史, 确定每次提交的版本号, 从而用git reset恢复指定版
    # 本, 准确来说, git log查看提交历史便于回退到哪个版本, git reflog查看命令历史
    # 便于确定回到未来哪个版本
git reset --hard commit_id  # 用于回到指定版本, commit_id可以是hash的前几位, 只要
    # 能唯一确定版本号即可, HEAD是当前版本, HEAD^ HEAD^^分别是上一个和上上个版本
    # 以此类推, 也可以用HEAD~5表示最新的第5个版本
    # ps: git reset回到某个版本后, 如果没有加--hard选项, 则工作区的文件还需手动加
    # ps: git其实是用HEAD指针指向当前版本的, 如果直接退回到倒数第n个版本, 则这个
    #   版本就会成为新的HEAD, 而0~n-1这些则看不到了, 但是可以使用git reflog查看所
    #   有的commit_id序列, 从而找到之前的HEAD恢复, 此时log列表中可以看到所有的
    #   commit_id的, 0~n-1 n n+1等
    # ps: 使用这条命令时一定要特别注意, 如果有add后没有提交的文件, 必须要提交之后
    #   才reset, 否则即使再次恢复到改版本, 这些staged状态的文件都会丢失, 这一点很
    #   可怕的, 整个文件都没了
git remote add origin git@github.com:caixxiong/MyNotes.git  # 关联远程库, 注意必须
    # 在远程先建立一个仓库才能将本地库关联到远程, origin是远程库的名字, 是默认写法
    # origin在之后的push和pull中会经常用的, 因为它是远程库的名字
    # 一般写法: git remote add origin git@server-name:path/repo-name.git
git push -u origin master  # 将本地库的所有内容推送到远程库中, 第一次要使用-u选项, 
    # 将远程和本地的master分支关联起来, 后续的pull和push则不需要-u了
    ps: 有时候比较慢, 甚至不走字, 过一会而重试就好了
    ps: 有时候push失败, 说远程仓库有本地没有的内容, 此时先git pull origin b_name
    #   然后再push即可
git pull origin  # 将远程仓库拉取下来, 对于用git clone创建的仓库也可直接使用该命令
    # 即使没有手动用git remote add origin关联之
git clone url  # 克隆远程库到本地, url可以是git@github.com:caixxiong/rep_name.git
    # 这是ssh协议的url, 还可是https之类: https://github.com/caixxiong/rep_name.git
    # 用git@github.com类型的网址默认是用ssh协议的, 上传速度不受限, 但是下载时受限
    # 了, 因为没有使用代理, 而用https则走代理, 可以下载比较快, 修改hosts后,git url
    # 也可以正常下载了
# ps: 关联远程仓库的两种方式: 
    # git remote add origin, 先有本地库后有远程库的关联方式
    # git clone url, 从0开发, 先创建好远程库, 然后克隆到本地, 不需git remote add

# git中文件的状态: 没有使用add的文件都是untracked状态, 表示不会被git追踪和管理, 如
    # 果使用了add, 则会被git追踪了, 此时状态分为两种:staged和unstaged, 前者是指可
    # 以直接commit的, 一般是刚用add之后的文件, 后者则是之前add了但是后面又修改了,
    # 此时需要将修改后的文件再次add, 才会变成staged状态

# git概念: 
    # 工作区: 就是我们看到的当前目录的文件状态, 我们的所有改动都是在工作区
    # 暂存区: staged or index, 用于存放文件在add之后的状态
    # 版本库: 每次commit都会有一个版本号(comit_id), 它表示某次修改的所有文件的最终
    #         状态, 从comit_id可以恢复出一个版本的(所有)文件
    # ps: git管理的是文件的修改(状态), 而不是文件本身,只是在恢复的时候可以根据保存
    #     的这些修改状态和最初的文件还原最终的文件

# git 分支:
    # 用户创建的非master分支, 别的用户是看不到的, 方便用于一个功能要多天才能完成的
    #     情况, 这个时候如果每天都提交代码, 由于代码的不完整性, 可能导致别人使用出
    #     错, 但是如果不提交, 又可能会有丢失代码的风险, 所以最好的解决办法就是创建
    #     每个人自己的分支, 最后再合并
    git branch       # 查看所有分支, *则是当前分支
    git branch dev   # 创建分支dev
    git checkout dev # 进入dev分支, 若使用-b选项则是创建并切换
    git switch dev, git switch -c dev  # 是新版本git切换, 创建+切换分支的命令
    git merge dev    # 将dev分支合并到当前分支上, 如果没有合并, 则其他分支的提交
    #   在当前分支是看不到的, 在master上创建新分支, 新分支可以看到master的所有
    #   文件, 但是在新分支上的文件在切换到之前分支是看不到的(除非merge)
    git branch -d dev    # 删除dev分支, 一般是merge之后就可以删除分支了
    git push origin dev  # 将dev推送到远程分支
    git branch -r        # -r查看远程分支, -a查看所有分支(远程和本地)
    git branch -r -d origin/dev  && git push origin :dev  # 删除远程分支dev
    git push -d origin dev  # 删除远程分支更快的方法, 使用-d选项
    ps: 如果有change没有commit, 则checkout到其他分支会失败, 必须commit后才可以切
    #   换到其他分支, 这就出现一个问题, 如果当前工作还没有干完, 不能commit, 但是
    #   之前发布的代码有bug了, 需要创建临时分支进行修改, 此时又不能checkout到其
    #   他分支, 所以git提供了一个功能: git stash, 用于保存当前工作区, 可以切换到
    #   其他分支, 使用新的工作区, 等修改完后, 再继续切换到当前分支并恢复当前工作
    #   区, 恢复是用git stash list查看所有的stash, 然后git stash pop恢复工作区并
    #   把stash删除, git stash apply 则是恢复工作区但是不删除stash, 如果是有多个
    #   stash, 则git stash apply stash@{k}即可, k是stash编号, 另外需要注意的是, 
    #   在master上修复好bug后, 这个bug在dev分支上仍然是存在的, 此时可以用git提供
    #   的git cherry-pick bug_fixed_commit_id, 就可以把修复bug的提交在dev分支上
    #   重复一遍, 此时可能会有问题, 就是如果修复bug的那部分代码在dev上有过改动,则
    #   可能git cherry-pick命令可能会出现无法合并后的错误
    ps: 因为分支操作的速度很快, Git官方是鼓励大量使用分支的
    ps: 如果自动merge失败, 则需要手动编辑文件为我们希望的内容, 然后commit和merge
    #   使用 git log --graph --pretty=oneline --abbrev-commit 查看分支合并图,另外
    #   使用git merge --no-ff选项是需要使用-m "commit info", 因为此时会对新分支进
    #   行一次提交, 然后再合并, 如果不用--no-ff, 则是直接合并, 不对新分支进行提交
    ps: 分支管理原则, 一般来说, master分支应该是非常稳定的, 用于发布新版本, 平时不
    #    能在上面干活, 需要给干活创建一个新分支叫做dev, 小伙伴们都会有自己的干活分
    #    支, 各自写好的代码在dev分支上合并和管理, 这样也方便修复bug, 因为出了bug
    #    后, 一般是就地创建修改bug的分支, 这个分支必须是在发布版本上创键, 因为git
    #    在哪里创建分支, 则分支中的内容就是当前工作目录下的, 所以基于发布版上创建
    #    临时分支, 就是在出现bug的原始代码上改, 如果没有dev分支, 大家的所有工作都
    #    基于master, 则出现bug时, master可能已经有了很多改动, 当前的master已经不
    #    是之前的master了, 此时要定位到之前出bug的版本就比较繁琐了
    ps: 出现bug时, 是在master分支上创建临时bug分支, 开发新功能时, 在dev分支上创建
    #   feature临时分支, 写完代码后合并到master上并删除临时分支, 其中可能需要用
    #   git stash保存当前工作区, 并且对于bug分支来说, 还需将bug提交在dev上重复一次

# ps: git diff显示的信息含义:
    # 第一行: diff --git a/file_name b/file_name, 是git实际执行的命令, a是原文件
    #         b是修改后的文件
    # 第二行: index a964e37..e24a1f1 100644, 分别表示a和b的hash前7位, 100644是代
    #         表对象的模式(100644 普通文件&644权限)
    # 第三四行: 表示接下来进行比较的两个文件, 因为diff是可以同时比较多个文件的, 
    #         ---表示改动前的文件, +++是改动后的文件
    # @@ -n,m +k,j@@ 的含义: 首先git比较时会把当前改动位置的上下文内容显示出来,
    #         正常是前后各3行, 但是如果当前修改的位置没有足够的前后上下文内容, 
    #         则有多少显示多少行, 这时就需要根据颜色来区分有多少上下文行了, 上
    #         下文内容显示颜色是正常的, 改动的内容-是红色+是绿色.
    #         
    #         -n,m标志原文件的改动位置, +k,j标志修改后文件的改动位置, 其中n和k
    #         是指当前改动前上下文第1行的行号, 所以正常来说真正修改的第1行的行号
    #         是n+3(如果前面有3行上下文, 或者是n+0 1 2等), m, j则是表示包括上下
    #         文和修改的总行数, 所以git diff打印的信息是文件中的第n,.., n+m-1和
    #         k, .., k+j-1行. 显示的行中"-开头的红色字体"是原始内容, "+开头的绿
    #         色"是修改后的内容.注意, n和k不一定相同, 除非前面改动增删的行数相同
    #         
    #         @@ -2,7 +2,8@@ 分析: 8-7=1, 所以肯定是多了1行, 有可能是直接加一行
    #         也可能是修改了一行再加一行, 正常情况下7-3-3=1 是改动了文件的1行, 
    #         有时是上下文行数不足3+3, 则实际修改的行数就是m-上下文实际行数了
